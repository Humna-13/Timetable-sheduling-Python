import numpy as np
from random import randint, random
NUM_COURSES = 10  # total courses
NUM_SECTIONS = 5  # total sections
NUM_PROFESSORS = 10  # total professors
NUM_DAYS = 5  # Number of days in a week
NUM_TIMESLOTS = 6  # Number of timeslots avialable per day
NUM_ROOMS = 10  # Number of rooms
ROOM_CAPACITY = {'classroom': 60, 'large_hall': 120}
POPULATION_SIZE = 100  # Population size
NUM_ITERATIONS = 100  # Number of iterations
CROSSOVER_RATE = 0.9  # Crossover rate
MUTATION_RATE = 1.0 / (NUM_COURSES * 12)  # Mutation rate

class Timetable:
    def __init__(self):

        self.data = np.random.randint(0, 2, (NUM_COURSES, 2, NUM_SECTIONS, NUM_PROFESSORS, NUM_DAYS, NUM_TIMESLOTS, NUM_ROOMS))       # Initialize timetable with random values

    def crossover(self, other):

        child = Timetable() #new timetable to store the offspring after crossover


        crossover_point = randint(1, NUM_COURSES - 1)      # Crossover point selection randomly single point crossover

        # Copy data from the parents up to the crossover point
        child.data[:crossover_point] = self.data[:crossover_point].copy()
        child.data[crossover_point:] = other.data[crossover_point:].copy()

        return child

    def mutate(self):
        # Mutation can occur in any part of the timetable data
        for i in range(NUM_COURSES): #iterating over each course
            for j in range(2): #iterates over two values 0 and 1 representing the first and second lecture of each course.
                for k in range(NUM_SECTIONS): # iterates over each section of the course.
                    for l in range(NUM_PROFESSORS): #iterating over each professor
                        for m in range(NUM_DAYS): #iterating over each day
                            for n in range(NUM_TIMESLOTS): #iterates over each time slot of the day.
                                for o in range(NUM_ROOMS):# iterates over each room
                                    if random() < MUTATION_RATE: # a random number between 0 and 1. If the random number is less than the mutation rate, a mutation will occur.
                                        self.data[i, j, k, l, m, n, o] = 1 - self.data[i, j, k, l, m, n, o] # This line flips the value of the timetable data at the specified index. If it's 0, it becomes 1, and other war round. This represents the mutation in the timetable data.

    def fitness(self):
        # Calculate fitness of the timetable
        conflicts = 0

  # Constraint 1: Classes can only be scheduled in free classrooms.
        # Constraint 2: A classroom should be big enough to accommodate the section.
        for i in range(NUM_COURSES): # These nested loops iterate over each possible combination of course, lecture, section, day, time slot, and room.
            for j in range(2):
                for k in range(NUM_SECTIONS):
                    for m in range(NUM_DAYS):
                        for n in range(NUM_TIMESLOTS):
                            for o in range(NUM_ROOMS):
                                if self.data[i, j, k, :, m, n, o].sum() > 1: # This condition checks if more than one class is scheduled in the same room at the same time for a specific combination of course, lecture, section, day, time slot, and room. If so, it increments the conflicts variable.
                                    conflicts += 1

        # Constraint 3: A professor should not be assigned two different lectures at the same time.
        for l in range(NUM_PROFESSORS): # These loops iterate over each possible combination of professor, day, and time slot. The condition checks if a professor is assigned to more than one class at the same time. If so, it increments the conflicts variable.
            for m in range(NUM_DAYS):
                for n in range(NUM_TIMESLOTS):
                    if self.data[:, :, :, l, m, n, :].sum() > 1:
                        conflicts += 1

        # Constraint 4: The same section cannot be assigned to two different rooms at the same time.
        for k in range(NUM_SECTIONS):
            for m in range(NUM_DAYS):
                for n in range(NUM_TIMESLOTS):
                    if self.data[:, :, k, :, m, n, :].sum() > 1:  # The condition checks if a section is assigned to more than one room at the same time. If so, it increments the conflicts variable.
                        conflicts += 1

        # Constraint 5: No professor can teach more than 3 courses.
        for l in range(NUM_PROFESSORS):
            if (self.data[:, :, :, l, :, :, :].sum(axis=(0, 1, 2)) > 3).any(): #  the condition checks if any professor is assigned to more than three courses. If so, it increments the conflicts variable.
                conflicts += 1

        # Constraint 6: No section can have more than 5 courses in a semester.
        if (self.data.sum(axis=(0, 1, 3, 4, 5)) > 5).any(): # The condition checks if any section is assigned more than five courses. If so, it increments the conflicts variable.
            conflicts += 1

        # Constraint 7: Each course would have two lectures per week not on the same or adjacent days.
        for i in range(NUM_COURSES):
            for j in range(2):
                for k in range(NUM_SECTIONS):
                    lecture_days = np.where(self.data[i, j, k, :, :, :, :].sum(axis=(1, 2, 3)) > 0)[0]
                    if len(lecture_days) > 1:
                        for d in range(len(lecture_days) - 1):
                            if lecture_days[d+1] - lecture_days[d] <= 1:  # It checks if any course has two lectures scheduled on the same or adjacent days. If so, it increments the conflicts variable.
                                conflicts += 1 # conflict var inc

        # Constraint 8: Lab lectures should be conducted in two consecutive slots.
        for i in range(NUM_COURSES):
            if i % 2 == 0:
                for k in range(NUM_SECTIONS):
                    for m in range(NUM_DAYS):
                        for n in range(NUM_TIMESLOTS - 1): # it checks if any lab lecture is not scheduled in two consecutive time slots. If so, it increments the conflicts variable.
                            if self.data[i, 1, k, :, m, n, :].sum() > 0 and self.data[i+1, 1, k, :, m, n+1, :].sum() == 0:
                                conflicts += 1

        fitness_score = -conflicts  # calculates the fitness score by taking the negative of the number of conflicts and returns it as the fitness score of the timetable.
        return fitness_score

def genetic_algorithm(num_iter, pop_size, cross_rate, mut_rate):
    # Initialize population
    population = [Timetable() for _ in range(pop_size)]

    for gen in range(num_iter):

        scores = [timetable.fitness() for timetable in population]       # Evaluate population
        selected = [tournament_selection(population, scores) for _ in range(pop_size)]      # Select parents

        # Create next generation
        children = []
        for i in range(0, pop_size, 2):
            p1, p2 = selected[i], selected[i+1]
            c1 = p1.crossover(p2)
            c1.mutate()
            children.append(c1)

        # Replace population
        population = children

        best_index = np.argmax(scores)         # Print best timetable found in this generation
        best_timetable = population[best_index]
        print("Generation:", gen, "Best Score:", scores[best_index])
        print("Best timetable found in this generation is:", best_timetable)

    # Return the best timetable and its score
    best_index = np.argmax(scores)
    return population[best_index], scores[best_index]

def tournament_selection(population, scores, k=3):
# Tournament Selection
    selected = [population[randint(0, len(population)-1)] for _ in range(k)]
    selected_scores = [scores[population.index(ch)] for ch in selected if scores[population.index(ch)] is not None] #  list comprehension to iterate k times, each time selecting a random index within the range of the population length
    if len(selected_scores) > 0: # calculates the scores of the selected individuals., list comprehension and includes a condition to ensure that the score exists
        return selected[selected_scores.index(max(selected_scores))]
    else:
        return selected[randint(0, len(selected)-1)] # It returns a randomly selected individual from the selected list using the randint function to generate a random index within the range of the list length

best_timetable, best_score = genetic_algorithm(NUM_ITERATIONS, POPULATION_SIZE, CROSSOVER_RATE, MUTATION_RATE)
print("Best Score:", best_score)
